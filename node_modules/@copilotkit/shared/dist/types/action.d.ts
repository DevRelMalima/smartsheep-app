type TypeMap = {
    string: string;
    number: number;
    boolean: boolean;
    object: object;
    "string[]": string[];
    "number[]": number[];
    "boolean[]": boolean[];
    "object[]": object[];
};
type BaseParameter = {
    name: string;
    type?: Exclude<keyof TypeMap, "string" | "object" | "object[]">;
    description?: string;
    required?: boolean;
};
type StringParameter = {
    name: string;
    type: "string";
    description?: string;
    required?: boolean;
    enum?: string[];
};
type ObjectParameter = {
    name: string;
    type: "object" | "object[]";
    description?: string;
    required?: boolean;
    attributes?: Parameter[];
};
type Parameter = BaseParameter | StringParameter | ObjectParameter;
type EnumParameterType<E, Required> = E extends string ? Required extends false ? E | undefined : E : never;
type ObjectTypeParameter<Attributes> = Attributes extends Parameter[] ? MappedParameterTypes<Attributes> : never;
type ObjectArrayTypeParameter<Attributes> = Attributes extends Parameter[] ? MappedParameterTypes<Attributes>[] : any[];
type OtherParameterType<Type, Required> = Required extends false ? TypeMap[Type extends keyof TypeMap ? Type : "string"] | undefined : TypeMap[Type extends keyof TypeMap ? Type : "string"];
type MappedParameterTypes<T extends Parameter[]> = {
    [P in T[number] as P["name"]]: P extends {
        enum: Array<infer E>;
    } ? EnumParameterType<E, P["required"]> : P extends {
        type: "object";
        attributes: infer Attributes;
    } ? ObjectTypeParameter<Attributes> : P extends {
        type: "object[]";
        attributes?: never;
    } ? any[] : P extends {
        type: "object[]";
        attributes: infer Attributes;
    } ? ObjectArrayTypeParameter<Attributes> : OtherParameterType<P["type"], P["required"]>;
};
type Action<T extends Parameter[] | [] = []> = {
    name: string;
    description?: string;
    parameters?: T;
    handler: T extends [] ? () => any | Promise<any> : (args: MappedParameterTypes<T>) => any | Promise<any>;
};

export { Action, BaseParameter, MappedParameterTypes, ObjectParameter, Parameter, StringParameter };
