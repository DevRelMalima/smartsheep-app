{"version":3,"sources":["../../src/utils/langserve.ts"],"sourcesContent":["import { Action } from \"@copilotkit/shared\";\nimport { RemoteChain } from \"../types\";\nimport { RemoteRunnable } from \"langchain/runnables/remote\";\n\nexport async function remoteChainToAction(chain: RemoteChain): Promise<Action<any>> {\n  chain = { ...chain };\n  const runnable = new RemoteRunnable({ url: chain.chainUrl });\n\n  if (!chain.parameters) {\n    chain = await inferLangServeParameters(chain);\n  }\n\n  chain.parameterType ||= \"multi\";\n\n  return {\n    name: chain.name,\n    description: chain.description,\n    parameters: chain.parameters!,\n    handler: async (args: any) => {\n      let input: any;\n      if (chain.parameterType === \"single\") {\n        input = args[Object.keys(args)[0]];\n      } else {\n        input = args;\n      }\n      return await runnable.invoke(input);\n    },\n  };\n}\n\nexport async function inferLangServeParameters(chain: RemoteChain): Promise<RemoteChain> {\n  chain = { ...chain };\n\n  const supportedTypes = [\"string\", \"number\", \"boolean\"];\n\n  let schemaUrl = chain.chainUrl.replace(/\\/+$/, \"\") + \"/input_schema\";\n  let schema = await fetch(schemaUrl)\n    .then((res) => res.json())\n    .catch(() => {\n      throw new Error(\"Failed to fetch langserve schema at \" + schemaUrl);\n    });\n  // for now, don't use json schema, just do a simple conversion\n\n  if (supportedTypes.includes(schema.type)) {\n    chain.parameterType = \"single\";\n    chain.parameters = [\n      {\n        name: \"input\",\n        type: schema.type,\n        description: \"The input to the chain\",\n      },\n    ];\n  } else if (schema.type === \"object\") {\n    chain.parameterType = \"multi\";\n    chain.parameters = Object.keys(schema.properties).map((key) => {\n      let property = schema.properties[key];\n      if (!supportedTypes.includes(property.type)) {\n        throw new Error(\"Unsupported schema type\");\n      }\n      return {\n        name: key,\n        type: property.type,\n        description: property.description || \"\",\n        required: schema.required?.includes(key) || false,\n      };\n    });\n  } else {\n    throw new Error(\"Unsupported schema type\");\n  }\n\n  return chain;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,oBAA+B;AAE/B,eAAsB,oBAAoB,OAA0C;AAClF,UAAQ,EAAE,GAAG,MAAM;AACnB,QAAM,WAAW,IAAI,6BAAe,EAAE,KAAK,MAAM,SAAS,CAAC;AAE3D,MAAI,CAAC,MAAM,YAAY;AACrB,YAAQ,MAAM,yBAAyB,KAAK;AAAA,EAC9C;AAEA,QAAM,kBAAN,MAAM,gBAAkB;AAExB,SAAO;AAAA,IACL,MAAM,MAAM;AAAA,IACZ,aAAa,MAAM;AAAA,IACnB,YAAY,MAAM;AAAA,IAClB,SAAS,OAAO,SAAc;AAC5B,UAAI;AACJ,UAAI,MAAM,kBAAkB,UAAU;AACpC,gBAAQ,KAAK,OAAO,KAAK,IAAI,EAAE,CAAC,CAAC;AAAA,MACnC,OAAO;AACL,gBAAQ;AAAA,MACV;AACA,aAAO,MAAM,SAAS,OAAO,KAAK;AAAA,IACpC;AAAA,EACF;AACF;AAEA,eAAsB,yBAAyB,OAA0C;AACvF,UAAQ,EAAE,GAAG,MAAM;AAEnB,QAAM,iBAAiB,CAAC,UAAU,UAAU,SAAS;AAErD,MAAI,YAAY,MAAM,SAAS,QAAQ,QAAQ,EAAE,IAAI;AACrD,MAAI,SAAS,MAAM,MAAM,SAAS,EAC/B,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,EACxB,MAAM,MAAM;AACX,UAAM,IAAI,MAAM,yCAAyC,SAAS;AAAA,EACpE,CAAC;AAGH,MAAI,eAAe,SAAS,OAAO,IAAI,GAAG;AACxC,UAAM,gBAAgB;AACtB,UAAM,aAAa;AAAA,MACjB;AAAA,QACE,MAAM;AAAA,QACN,MAAM,OAAO;AAAA,QACb,aAAa;AAAA,MACf;AAAA,IACF;AAAA,EACF,WAAW,OAAO,SAAS,UAAU;AACnC,UAAM,gBAAgB;AACtB,UAAM,aAAa,OAAO,KAAK,OAAO,UAAU,EAAE,IAAI,CAAC,QAAQ;AAtDnE;AAuDM,UAAI,WAAW,OAAO,WAAW,GAAG;AACpC,UAAI,CAAC,eAAe,SAAS,SAAS,IAAI,GAAG;AAC3C,cAAM,IAAI,MAAM,yBAAyB;AAAA,MAC3C;AACA,aAAO;AAAA,QACL,MAAM;AAAA,QACN,MAAM,SAAS;AAAA,QACf,aAAa,SAAS,eAAe;AAAA,QACrC,YAAU,YAAO,aAAP,mBAAiB,SAAS,SAAQ;AAAA,MAC9C;AAAA,IACF,CAAC;AAAA,EACH,OAAO;AACL,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC3C;AAEA,SAAO;AACT;","names":[]}